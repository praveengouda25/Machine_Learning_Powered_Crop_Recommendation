# -*- coding: utf-8 -*-
"""Crop_Recommendation_Project...ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OXxA0GZ41__RoPFS5rfZJWyKXQap0Fop

# Import Libraries--->
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df= pd.read_csv('/content/Crop_recommendation.csv')
df

df.info()

df.describe()

"""# EDA:: Exploratory Data Analysis--->"""

# NULL VALUES-->

df.isnull().sum()

# DUPLICATES-->

df.duplicated().sum()

# Outliers-->

for  x in df.columns:
  if df[x].dtypes!='object':
    plt.boxplot(df[x])
    plt.xlabel(x)
    plt.ylabel('count')
    plt.title("Outliers Detection")
    plt.show()

# Removing the Outliers;;>

out_list=['P','K', 'temperature', 'humidity', 'ph', 'rainfall']

for x in out_list:
  Q1=df[x].quantile(0.25)
  Q3=df[x].quantile(0.75)
  IQR=Q3-Q1
  LB=Q1-1.5*(IQR)
  UB=Q3+1.5*(IQR)

  df= df[(df[x]>=LB) & (df[x]<=UB)]

for  x in df.columns:
  if df[x].dtypes!='object':
    plt.boxplot(df[x])
    plt.xlabel(x)
    plt.ylabel('count')
    plt.title("Outliers Detection")
    plt.show()

# LABEL_ENCODING-->

#from sklearn.preprocessing import LabelEncoder

df['label'].unique()

crop= df.drop('label', axis=1)

crop.info()

"""# Correlation"""

crop.corr()

plt.figure(figsize=(12,8))
sns.heatmap(crop.corr(), annot=True, cbar=True, cmap='coolwarm')
plt.show()

"""# Distribuition Plot-->"""

sns.displot(data=df, x='temperature', kind='kde')
plt.show()

sns.displot(data=df, x='humidity', kind='kde')
plt.show()

sns.displot(data=df, x='ph', kind='ecdf')
plt.show()

sns.displot(data=df, x='rainfall', kind='hist')
plt.show()

sns.displot(data=df, x='P', kind='kde')
plt.show()

"""Splitting Data"""

from sklearn.model_selection import train_test_split

x= df.iloc[:,:-1]
y= df.iloc[:,-1]

x_train, x_test, y_train, y_test= train_test_split(x,y, test_size=0.2, random_state=42)

x_train

from sklearn.ensemble import RandomForestClassifier

model= RandomForestClassifier()

model.fit(x_train, y_train)

prediction = model.predict(x_test)
prediction

accuracy= model.score(x_test, y_test)

accuracy

"""# New_Feature_Prediction"""

df

new_features= [[36,58,25,28.66024,59.31891,8.399136,36.9263]]
prediction_crop= model.predict(new_features)
print(f"Prediction Crop:{prediction_crop}")

"""# **import pickel saved model**"""

import pickle

pickle.dump(model, open("model.pkl","wb"))

pickle.load(open("model.pkl","rb"))







